public class BitOperator {
	public static void main(String[] args) {
		System.out.println(2&3);
		// 2的原码  00000000 00000000 00000000 00000010 
		// 2的补码00000000 00000000 00000000 00000010 ; 正数原码与补码相同
		// 3的原码 00000000 00000000 00000000 00000011
		// 3的补码 00000000 00000000 00000000 00000011
		// 2&3 2按位与3，两位全为1，结果为1，否则为0， 计算后补码为00000000 00000000 00000000 00000010，其原码相同为00000000 00000000 00000000 00000010，
		// 转为十进制为2
		System.out.println(~-2);
		// -2原码，10000000 00000000 00000000 00000010，反码：（负数反码符号位不变，其他位取反）11111111 11111111 11111111 11111101
		//负数的补码为反码+1：11111111 11111111 11111111 11111110，按位取反结果为00000000 00000000 00000000 00000001，
		//其原码相同为00000000 00000000 00000000 00000001，十进制为1
		System.out.println(~2);
		//2原码及补码 00000000 00000000 00000000 00000010，按位取反：11111111 11111111 11111111 11111101 首位1为负数，反码为补码-1，为11111111 11111111 11111111 11111100
		//原码为10000000 00000000 00000000 00000011，十进制为-3
		System.out.println(2|3);
		//2的补码：00000000 00000000 00000000 00000010
		//3的补码：00000000 00000000 00000000 00000011
		//2按位与3，两位有一个为1，结果为1，否则为0，运算后结果为00000000 00000000 00000000 00000011，正数原码与补码相同，转为十进制为3
		System.out.println(2^3);
		//2的补码：00000000 00000000 00000000 00000010
		//3的补码：00000000 00000000 00000000 00000011
		//2按位间或3，两位一个为0，一个为1，结果为1，否则为0，运算结果为00000000 00000000 00000000 00000001，正数补码与原码相同，十进制为1
		System.out.println(~-5);
		//-5原码10000000 00000000 00000000 00000101，反码，11111111 11111111 11111111 11111111 11111010，补码为反码+1：11111111 11111111 11111111 11111111 11111011
		//-5按位取反，结果为00000000 00000000 00000000 00000100，正数三码合一，转为十进制为4
		System.out.println(13&7);
		//13补码为：00000000 00000000 00000000 00001101
		//7补码为： 00000000 00000000 00000000 00000111
		//按位与，运算后结果为00000000 00000000 00000000 00000101，正数，为5
		System.out.println(5|4);
		//4补码：00000000 00000000 00000000 00000100
		//5补码：00000000 00000000 00000000 00000101
		//按位或，结果为00000000 00000000 00000000 00000101，十进制为5
		System.out.println(-3^3);
		//-3原码：10000000 00000000 00000000 00000011；反码：11111111 11111111 11111111 11111111 11111100，补码为+1，11111111 11111111 11111111 11111111 11111101
		//3补码：00000000 00000000 00000000 00000011
		//按位间或，两位一个为0，一个为1，结果为1，否则为0，结果为11111111 11111111 11111111 11111111  11111110，负数反码为-1，为11111111 11111111 11111111 11111111  11111101，
		//原码为10000000 00000000 00000000 00000000 00000010，十进制为-2
		
	}
}